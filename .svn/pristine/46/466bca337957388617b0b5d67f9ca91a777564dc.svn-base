module Interface.ThreeD where

import Graphics.Gloss
import Tarefa1_2019li1g181 (piso)
import LI11920

-- | Representa um ponto tridimensional, utilziado para desenhar a imagem
type Ponto3 = (Float, Float, Float)

-- | Soma dois `Ponto3`
--
-- >>> (0,0,0) `add3` (2,3,5)
-- (2,3,5)
add3 :: Ponto3 -> Ponto3 -> Ponto3
add3 (x,y,z) (w,i,k) = (x+w,y+i,z+k)

-- | Representa um objeto tridimensional
data Objeto = Forma Color [Ponto3]
            | LineO Color [Ponto3]
            | Combinado [Objeto]

translateO :: Ponto3 -> Objeto -> Objeto
translateO p (Forma c ps) = Forma c (add3 p <$> ps)
translateO p (LineO c ps) = LineO c (add3 p <$> ps)
translateO p (Combinado os) = Combinado (translateO p <$> os)

-- | Projeta o ponto num plano 2d utilizando uma projeção ortogonal.
-- https://en.wikipedia.org/wiki/Orthographic_projection
-- TODO: Esta transformação é horrível, arranjar uma melhor.
projetarPonto :: Ponto3 -> Point
projetarPonto (x, y, z) = ((x - 5) / (z+1), (y - 5) / (z+1))

-- | Converte um `Objeto` numa `Picture` que pode ser desenhada pelo Gloss.
drawObjeto :: Objeto -> Picture
drawObjeto (Forma c ps) = color c $ polygon $ projetarPonto <$> ps
drawObjeto (LineO c ps) = color c $ line $ projetarPonto <$> ps
drawObjeto (Combinado os) = pictures $ drawObjeto <$> os

-- | Devolve a `Color` de um `Piso`
pisoColor :: Piso -> Color
pisoColor Terra = makeColorI 184 111 80 255
pisoColor Lama = makeColorI 63 40 50 255
pisoColor Cola = makeColorI 192 203 220 255
pisoColor Boost = makeColorI 38 43 68 255
pisoColor Relva = makeColorI 99 199 77 255

pecaToObjeto :: Peca -> Objeto
pecaToObjeto p = Combinado [chao, parede, l1, l2]
  where
    (y1, y2) = case p of
        Recta _ h     -> (fromIntegral h, fromIntegral h)
        Rampa _ y1 y2 -> (fromIntegral y1, fromIntegral y2)
    
    cor = pisoColor $ piso p
    chao = Forma cor [(0, y1, 0), (1, y2, 0), (1, y2, 1), (0, y1, 1), (0, y1, 0)]
    parede = Forma (dim $ dim cor) [(0, 0, 0), (1, 0, 0), (1, y2, 0), (0, y1, 0), (0, 0, 0)]
    l1 = LineO (dim $ dim $ dim cor) [(0, y1, 0), (1, y2, 0)]
    l2 = LineO (dim $ dim $ dim cor) [(0, y1, 1), (1, y2, 1)]

pistaToObjeto :: Pista -> Objeto
pistaToObjeto l = Combinado $ reverse $ go 0 l
  where
    go :: Integer -> Pista -> [Objeto]
    go i [] = []
    go i (h:t) = translateO (fromInteger i, 0, 0) (pecaToObjeto h) : go (i + 1) t

mapaToObjeto :: Mapa -> Objeto
mapaToObjeto l = Combinado $ reverse $ go 0 l
  where
    go :: Integer -> Mapa -> [Objeto]
    go i [] = []
    go i (h:t) = translateO (0, 0, fromInteger i) (pistaToObjeto h) : go (i + 1) t

