-- | Este módulo define funções genéricas sobre vetores e matrizes, que serão úteis na resolução do trabalho prático.
module Tarefa0_2019li1g181 where

-- * Funções não-recursivas.

-- | Um ponto a duas dimensões dado num referencial cartesiado (distâncias aos eixos vertical e horizontal)
--
-- <<http://li1.lsd.di.uminho.pt/images/cartesiano.png cartesisano>>
-- , ou num referencial polar (distância à origem e ângulo do respectivo vector com o eixo horizontal).
--
-- <<http://li1.lsd.di.uminho.pt/images/polar.png polar>>
data Ponto = Cartesiano Double Double | Polar Double Angulo deriving Show

-- ** Funções sobre pontos

-- | Encontra a coordenada x de um ponto.
posx :: Ponto -> Double
posx (Cartesiano x _) = x
posx (Polar r a) = r * (cos (a * pi / 180))

-- | Encontra a coordenada y de um ponto
posy :: Ponto -> Double
posy (Cartesiano _ y) = y
posy (Polar r a) = r * (sin (a * pi / 180))

-- | Um ângulo em graus.
type Angulo = Double

-- ** Funções sobre vetores

-- | Um 'Vetor' na representação escalar é um 'Ponto' em relação à origem.
type Vetor = Ponto
-- ^ <<http://li1.lsd.di.uminho.pt/images/vetor.png vetor>>

-- *** Funções gerais sobre 'Vetor'es.

-- | Soma dois 'Vetor'es.
somaVetores :: Vetor -> Vetor -> Vetor
somaVetores a b = Cartesiano (posx a + posx b) (posy a + posy b)

-- | Subtrai dois 'Vetor'es.
subtraiVetores :: Vetor -> Vetor -> Vetor
subtraiVetores a b = Cartesiano (posx a - posx b) (posy a - posy b)

-- | Multiplica um escalar por um 'Vetor'.
multiplicaVetor :: Double -> Vetor -> Vetor
multiplicaVetor n (Cartesiano x y) = Cartesiano (n*x) (n*y)
multiplicaVetor n (Polar r a) = Polar (r*n) a

-- ** Funções sobre rectas.

-- | Um segmento de reta é definido por dois pontos.
type Reta = (Ponto,Ponto)

-- | Testar se dois segmentos de reta se intersetam.
--
-- __NB:__ Aplique as equações matemáticas bem conhecidas, como explicado por exemplo em
-- <http://www.cs.swan.ac.uk/~cssimon/line_intersection.html>.
intersetam :: Reta -> Reta -> Bool
intersetam (p1, p2) (p3, p4) = 0 <= ta && ta <= 1 && 0 <= tb && tb <= 1
    where
        ta = ((posy p3 - posy p4)*(posx p1 - posx p3) + (posx p4 - posx p3)*(posy p1 - posy p3)) / d
        tb = ((posy p1 - posy p2)*(posx p1 - posx p3) + (posx p2 - posx p1)*(posy p1 - posy p3)) / d
        d = (posx p4 - posx p3)*(posy p1 - posy p2) - (posx p1 - posx p2)*(posy p4 - posy p3)

-- | Calcular o ponto de intersecao entre dois segmentos de reta.
--
-- __NB:__ Aplique as equações matemáticas bem conhecidas, como explicado por exemplo em
-- <http://www.cs.swan.ac.uk/~cssimon/line_intersection.html>.
intersecao :: Reta -> Reta -> Ponto
intersecao (p1, p2) (p3, p4) = somaVetores p1 (multiplicaVetor ta (subtraiVetores p2 p1))
    where
        ta = ((posy p3 - posy p4)*(posx p1 - posx p3) + (posx p4 - posx p3)*(posy p1 - posy p3)) / d
        tb = ((posy p1 - posy p2)*(posx p1 - posx p3) + (posx p2 - posx p1)*(posy p1 - posy p3)) / d
        d = (posx p4 - posx p3)*(posy p1 - posy p2) - (posx p1 - posx p2)*(posy p4 - posy p3)


-- ** Funções sobre listas

-- *** Funções gerais sobre listas.
--
-- Funções não disponíveis no 'Prelude', mas com grande utilidade.

-- | Verifica se o indice pertence à lista.
--
-- __Sugestão:__ use a função 'length' que calcula tamanhos de listas
eIndiceListaValido :: Int -> [a] -> Bool
eIndiceListaValido n l = n < length l && n >= 0

-- ** Funções sobre matrizes.

-- *** Funções gerais sobre matrizes.

-- | A dimensão de um mapa dada como um par (/número de linhas/,/número de colunhas/).
type DimensaoMatriz = (Int,Int)

-- | Uma posição numa matriz dada como um par (/linha/,/colunha/).
-- As coordenadas são dois números naturais e começam com (0,0) no canto superior esquerdo, com as
-- linhas incrementando para baixo e as colunas incrementando para a direita:
--
-- <<http://li1.lsd.di.uminho.pt/images/posicaomatriz.png posicaomatriz>>
type PosicaoMatriz = (Int,Int)

-- | Uma matriz é um conjunto de elementos a duas dimensões.
--
-- Em notação matemática, é geralmente representada por:
--
-- <<https://upload.wikimedia.org/wikipedia/commons/d/d8/Matriz_organizacao.png matriz>>
type Matriz a = [[a]]

-- | Calcula a dimensão de uma matriz.
--
-- __NB:__ Note que não existem matrizes de dimensão /m * 0/ ou /0 * n/, e que qualquer matriz vazia
-- deve ter dimensão /0 * 0/.
--
-- __Sugestão:__ relembre a função 'length', referida anteriormente.
dimensaoMatriz :: Matriz a -> DimensaoMatriz
dimensaoMatriz a = (if n == 0 then 0 else m, n)
    where m = length a
          n = if m == 0 then 0 else length (head a)

-- | Verifica se a posição pertence à matriz.
ePosicaoMatrizValida :: PosicaoMatriz -> Matriz a -> Bool
ePosicaoMatrizValida (m1, n1) a = m1 < m2 && n1 < n2
    where (m2, n2) = dimensaoMatriz a

-- * Funções recursivas.

-- ** Funções sobre ângulos

-- | Normaliza um ângulo na gama [0..360).
--  Um ângulo pode ser usado para representar a rotação
--  que um objecto efectua. Normalizar um ângulo na gama [0..360)
--  consiste, intuitivamente, em extrair a orientação do
--  objecto que resulta da aplicação de uma rotação. Por exemplo, é verdade que:
--
-- prop> normalizaAngulo 360 = 0
-- prop> normalizaAngulo 390 = 30
-- prop> normalizaAngulo 720 = 0
-- prop> normalizaAngulo (-30) = 330
normalizaAngulo :: Angulo -> Angulo
normalizaAngulo a
    | a < 0 = normalizaAngulo (a + 360)
    | a >= 360 = normalizaAngulo (a - 360)
    | otherwise = a

-- ** Funções sobre listas.

-- | Devolve o elemento num dado índice de uma lista.
--
-- __Sugestão:__ Não use a função (!!) :: [a] -> Int -> a :-)
encontraIndiceLista :: Int -> [a] -> a
encontraIndiceLista 0 (x:xs) = x
encontraIndiceLista n (x:xs) = encontraIndiceLista (n-1) xs

-- | Modifica um elemento num dado índice.
--
-- __NB:__ Devolve a própria lista se o elemento não existir.
atualizaIndiceLista :: Int -> a -> [a] -> [a]
atualizaIndiceLista 0 a (x:xs) = a:xs
atualizaIndiceLista _ _ [] = []
atualizaIndiceLista i a (x:xs) = x:(atualizaIndiceLista (i-1) a xs)

-- ** Funções sobre matrizes.

-- | Devolve o elemento numa dada 'Posicao' de uma 'Matriz'.
encontraPosicaoMatriz :: PosicaoMatriz -> Matriz a -> a
encontraPosicaoMatriz (i,j) a = encontraIndiceLista j (encontraIndiceLista i a)

-- | Modifica um elemento numa dada 'Posicao'
--
-- __NB:__ Devolve a própria 'Matriz' se o elemento não existir.
atualizaPosicaoMatriz :: PosicaoMatriz -> a -> Matriz a -> Matriz a
atualizaPosicaoMatriz (i,j) a m = atualizaIndiceLista i linha m
    where linha = atualizaIndiceLista j a $ encontraIndiceLista i m
