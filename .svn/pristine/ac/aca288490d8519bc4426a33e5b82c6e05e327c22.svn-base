-- | Este módulo define funções comuns da Tarefa 2 do trabalho prático.
module Tarefa2_2019li1g181 where

import LI11920
import Tarefa0_2019li1g181
import Tarefa1_2019li1g181

-- Objetos pré-definidos para testes
jogadorInicial = Jogador 0 0 1 1 (Chao False)
mapaInicial = gera 2 5 1

-- * Testes

-- | Testes unitários da Tarefa 2.
--
-- Cada teste é um triplo (/identificador do 'Jogador'/,/'Jogada' a efetuar/,/'Estado' anterior/).
testesT2 :: [(Int,Jogada,Estado)]
testesT2 = [
    (0, Movimenta E, Estado mapaInicial [jogadorInicial{estadoJogador=Ar 0 1 0}]) ]

-- * Funções principais da Tarefa 2.

-- | Efetua uma jogada.
jogada :: Int    -- ^ O identificador do 'Jogador' que efetua a jogada.
       -> Jogada -- ^ A 'Jogada' a efetuar.
       -> Estado -- ^ O 'Estado' anterior.
       -> Estado -- ^ O 'Estado' resultante após o jogador efetuar a jogada.
jogada idJogador acao estado = case acao of
    Movimenta dir -> atualizaJogador idJogador (movimenta jogador mapa dir) estado
    Acelera       -> undefined
    Desacelera    -> undefined
    Dispara       -> undefined
  where
    jogadores = jogadoresEstado estado  -- A lista de todos os jogadores
    jogador = jogadores !! idJogador    -- O jogador que efetua a jogada
    mapa = mapaEstado estado

atualizaJogador :: Int -> Jogador -> Estado -> Estado
atualizaJogador idJogador jogador estado = estado { jogadoresEstado = nJogadores }
  where
    jogadores = jogadoresEstado estado
    nJogadores = atualizaIndiceLista idJogador jogador jogadores

-- | Executa a jogada Movimenta num jogador
movimenta :: Jogador -> Mapa -> Direcao -> Jogador
movimenta jogador mapa dir
    | dir == C || dir == B = mudaPista jogador mapa dir
    | dir == D || dir == E = inclina jogador dir

-- | Muda um jogador de pista
mudaPista :: Jogador -> Mapa -> Direcao -> Jogador
mudaPista jogador mapa dir = undefined

-- | Inclina um jogador na direção especificada
inclina :: Jogador -> Direcao -> Jogador
inclina jogador dir = case estado of
    Ar{} -> jogador { estadoJogador = estado {inclinacaoJogador = novaInc} }
    estado -> jogador  -- Caso o jogador não esteja no ar, não fazemos nada 
  where
    estado = estadoJogador jogador
    -- A diferença entre a nova inclinação e a anterior
    diferenca
        | dir == E = 15  -- TODO verificar isto
        | dir == D = -15
    inc = inclinacaoJogador estado
    novaInc = max (-90) (min 90 $ inc + diferenca)

  
dispara :: Jogador -> Mapa -> Jogador -> Mapa --devo devolver estado ou jogador e mapa?
dispara jogador mapa = undefined  