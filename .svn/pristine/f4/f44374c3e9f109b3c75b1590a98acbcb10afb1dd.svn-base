module Interface.ThreeD where

import Graphics.Gloss

-- | Representa um ponto tridimensional, utilziado para desenhar a imagem
type Ponto3 = (Float, Float, Float)

-- | Representa um objeto tridimensional
data Objeto = Forma Color [Ponto3]
            | Combinado [Objeto]

-- | Projeta o ponto num plano 2d utilizando uma projeção ortogonal.
-- https://en.wikipedia.org/wiki/Orthographic_projection
-- TODO: Esta transformação é horrível, arranjar uma melhor.
projetarPonto :: Ponto3 -> Point
projetarPonto (x, y, z) = (x, (y + z) / 2)

-- | Converte um objeto numa Picture que pode ser desenhada pelo Gloss.
drawObjeto :: Objeto -> Picture
drawObjeto (Forma c ps) = color c $ polygon $ projetarPonto <$> ps
drawObjeto (Comibinado os) = pictures $ drawObjeto <$> os

pisoColor :: Piso -> Color
pisoColor Terra = makeColorI 184 111 80 255
pisoColor Lama = makeColorI 63 40 50 255
pisoColor Cola = makeColorI 192 203 220 255
pisoColor Boost = makeColorI 38 43 68 255
pisoColor Relva = makeColorI 99 199 77 255

pecaToObjeto :: Peca -> Objeto
pecaToObjeto p = Combinado [chao, parede]
  where
    (y1, y2) = case p of
        Recta _ h = (fromIntegral h, fromIntegral h)
        Rampa _ y1 y2 = (fromIntegral y1, fromIntegral y2)
    
        -- TODO Parede!
    chao = Forma (pisoColor $ piso p) [(0, y1, 0), (1, y2, 0), (1, y2, 1), (0, y1, 1), (0, y1, 0)]
