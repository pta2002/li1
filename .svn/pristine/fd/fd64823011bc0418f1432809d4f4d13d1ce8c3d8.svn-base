module Menu where

import Graphics.Gloss
import Graphics.Gloss.Interface.Pure.Game
import LI11920
import Data.List (findIndex,splitAt,init)
import Data.Maybe (fromJust)

data Instancia = Menu | DesenhaMapa Estado | Niveis 
          deriving Show
data EstadoMenu = EstadoMenu {botoes :: [EstadoButton],imagens :: [Picture]}
          deriving Show
data EstadoButton = EstadoButton {instancia :: Instancia,dimensao :: Dimensao, ponto :: Point, selecionado :: Bool, ativo :: Bool,imagem :: Picture, imagemSel :: Picture}
          deriving Show
type Dimensao = (Float,Float)

instance Eq EstadoButton where
      x == y = estadoButtonIgual x y

estadoButtonIgual :: EstadoButton -> EstadoButton -> Bool
estadoButtonIgual x y = selecionado x == selecionado y 

mapaDefault :: Mapa
mapaDefault = [[Recta Terra 0, Recta Terra 0]]

estadoInicial :: [Picture] -> EstadoMenu
estadoInicial li = EstadoMenu{ botoes = 
( 
     EstadoButton (DesenhaMapa estadoDefault ) (240,80) (0,0) True True (scale 0.4 0.4 mapBS)  (scale 0.4 0.4 mapB) :
     EstadoButton Niveis (240,80) (0,-120) False True (scale 0.4 0.4 nivB) (scale 0.4 0.4 nivBS) :
     EstadoButton Menu  (240,80) (0,-240) False True (scale 0.4 0.4 menB ) (scale 0.4 0.4 menBS):
     []
) , imagens = li}
      where
            (fundo:menB:menBS:mapB:mapBS:nivB:nivBS:[]) = li
jogadoresDefault :: [Jogador]
jogadoresDefault = [Jogador 0 0 1 1 (Chao False)]

estadoDefault :: Estado
estadoDefault = Estado mapaDefault jogadoresDefault
{-
botaoMapa :: EstadoButton
botaoMapa = EstadoButton (DesenhaMapa estadoDefault ) (40,20)  (0,0) True True

botaoNiveis :: EstadoMenu -> EstadoButton
botaoNiveis e = EstadoButton Niveis (40,20) (0,-80)  False True 

botaoMenu :: EstadoButton
botaoMenu =EstadoButton Menu  (40,20) (0,-160) False True  

butoes :: [EstadoButton]
butoes = [botaoMapa,botaoNiveis,botaoMenu] -- Se dispor de forma a que os botões estejam ordenados no eixo da vertical poupo mais trabalho e não tenho que
                                 -- que lidar com o problema caso os botões estejam na mesma ordenada
-}
fps :: Int
fps = 60






botoesToPic :: [EstadoButton] -> [Picture]
botoesToPic []  = []
botoesToPic ( b : li ) = (Translate (x) (y) pic) : (botoesToPic li)
      where
        sel = selecionado b
        (x,y) = ponto b
        (z,w) = dimensao b
        pic = imagem b
        

drawEstadoMenu :: EstadoMenu -> Picture
drawEstadoMenu e = Pictures  ((head li):(botoesToPic bt)) -----
      where
           bt = botoes e
           li = imagens e
           

reageEventoButton :: Event -> EstadoMenu -> EstadoMenu
reageEventoButton (EventKey (MouseButton LeftButton)  Down _ p ) e = instanciaToEstado  (checkButton p (botoes e)) e
reageEventoButton (EventKey (SpecialKey KeyDown) Down _ _ ) e = e{botoes = mudarSelec (-1) (botoes e)}
reageEventoButton (EventKey (SpecialKey KeyUp) Down _ _ ) e = e{botoes = mudarSelec 1 (botoes e)}
reageEventoButton (EventKey (SpecialKey KeyEnter) Down _ _) e = instanciaToEstado (verSelec (botoes e)) e 
reageEventoButton _ e = e

instanciaToEstado :: Maybe Instancia -> EstadoMenu -> EstadoMenu
instanciaToEstado x e = case x of
                            Nothing -> e
                            Just Niveis -> e{ botoes = [],imagens = [Circle 4]} 
                            _ ->  e{botoes = [],imagens = [Color yellow (Polygon [(0, 0), (10, 0), (10, 10), (0, 10), (0,0)])]}

checkButton :: Point        -- ^ As coordenadas do cursor que pressiona
            -> [EstadoButton] -- ^ O Botão a testar
            -> Maybe Instancia         -- ^ O resultado se o cursor está em cima do botão
checkButton _ [] = Nothing
checkButton (x,y) ( b : li) 
          |x <= xmax && x >= xmin && y <= ymax && y >= ymin = Just i 
          |otherwise = checkButton (x,y) li
    where
      i = instancia b
      d = dimensao b
      point = ponto b
      coordDim = dimencaoToCoordenada point d
      coordMin = fst coordDim
      coordMax = snd coordDim
      xmin = fst coordMin
      xmax = fst coordMax
      ymin = snd coordMin
      ymax = snd coordMax 
dimencaoToCoordenada :: Point-> (Float,Float) -> (Point,Point)
dimencaoToCoordenada (x,y) (a,b) =( (x - (a/2) , y - (b/2) ) , (x + (a/2) , y + (b/2) ) )

verSelec :: [EstadoButton] -> Maybe Instancia
verSelec [] = Nothing
verSelec (b : li)
      | selecionado b = Just (instancia b)
      | otherwise = verSelec li  

mudarSelec :: Int -> [EstadoButton] -> [EstadoButton]
mudarSelec n l
      | n == -1 && bs == []  = l
      | n == 1 && a == [] = l
      | n == -1 = a ++ [mudarImagemSel b{selecionado = False}] ++ [mudarImagemSel (head bs){selecionado = True} ] ++ (tail bs)  
      | otherwise = init a ++ [mudarImagemSel (last a){selecionado = True}] ++ [mudarImagemSel  b {selecionado = False} ] ++ bs
     where
         x = fromJust $ findIndex selecionado l
         (a,b:bs) = splitAt x l

mudarImagemSel :: EstadoButton -> EstadoButton
mudarImagemSel e = e {imagem = picSel, imagemSel = pic} 
      where
            pic = imagem e
            picSel = imagemSel e


main :: IO()
main = do
     menB <- loadBMP "res/LI1_botao_Menu.bmp"
     menBS <- loadBMP "res/LI1_botao_Menu_selec.bmp"
     mapB <- loadBMP "res/LI1_botao_Mapa.bmp"
     mapBS <- loadBMP "res/LI1_botao_Mapa_selec.bmp"
     nivB <- loadBMP "res/LI1_botao_Niveis.bmp"
     nivBS <- loadBMP "res/LI1_botao_Niveis_selec.bmp"
     fundo <- loadBMP "res/LI1_fundo_Excite.bmp"

     play (InWindow "Excite bike" (600,600) (0,0)) 
         (greyN 0.5)
         fps
         (estadoInicial (fundo:menB:menBS:mapB:mapBS:nivB:nivBS:[]))
         drawEstadoMenu
         reageEventoButton 
         (\x e -> e)


