module Interface.Estado where

import LI11920
import Tarefa1_2019li1g181
import Graphics.Gloss
import Graphics.Gloss.Interface.IO.Game
import Interface.ThreeD
import Interface.Sprites
import Interface.Motas
import Codec.Picture

data Instancia = Menu | DesenhaMapa Estado | Niveis 
          deriving Show
data EstadoButton = EstadoButton {instancia :: Instancia,dimensao :: Dimensao, ponto :: Point, selecionado :: Bool, ativo :: Bool,imagem :: Picture, imagemSel :: Picture}
          deriving Show
type Dimensao = (Float,Float)

data EstadoJogo = EstadoMenu { botoes :: [EstadoButton]
                             , imagens :: [Picture] }
                | EstadoJogo { mapaJogo :: Mapa
                             , jogadoresJogo :: [Jogador]
                             , cameraX :: Float
                             , objetoMapa :: Objeto
                             , spritesheet :: DynamicImage
                             , sprIdle :: Sprite
                             , sprMorto :: Sprite
                             }

mapaDefault :: Mapa
mapaDefault = [[Recta Terra 0, Recta Terra 0]]

jogadoresDefault :: [Jogador]
jogadoresDefault = [Jogador 0 0 1 1 (Chao False)]

estadoDefault :: Estado
estadoDefault = Estado mapaDefault jogadoresDefault

estadoMenu :: [Picture] -> EstadoJogo
estadoMenu li = EstadoMenu{ botoes = [ botaoMapa, botaoNiveis, botaoMenu], imagens = li}
  where
    (fundo:menB:menBS:mapB:mapBS:nivB:nivBS:[]) = li
    botaoMapa = EstadoButton (DesenhaMapa estadoDefault) (240,80) (0,0) True True (scale 0.4 0.4 mapBS)  (scale 0.4 0.4 mapB)
    botaoNiveis = EstadoButton Niveis (240,80) (0,-120) False True (scale 0.4 0.4 nivB) (scale 0.4 0.4 nivBS)
    botaoMenu = EstadoButton Menu  (240,80) (0,-240) False True (scale 0.4 0.4 menB ) (scale 0.4 0.4 menBS)

estadoInicialMenu :: IO EstadoJogo
estadoInicialMenu = do
    menB <- loadBMP "res/LI1_botao_Menu.bmp"
    menBS <- loadBMP "res/LI1_botao_Menu_selec.bmp"
    mapB <- loadBMP "res/LI1_botao_Mapa.bmp"
    mapBS <- loadBMP "res/LI1_botao_Mapa_selec.bmp"
    nivB <- loadBMP "res/LI1_botao_Niveis.bmp"
    nivBS <- loadBMP "res/LI1_botao_Niveis_selec.bmp"
    fundo <- loadBMP "res/LI1_fundo_Excite.bmp"

    let estadoI = estadoMenu [fundo, menB, menBS, mapB, mapBS, nivB, nivBS]

    return estadoI

estadoInicialMapa :: Mapa -> [Jogador] -> DynamicImage -> EstadoJogo
estadoInicialMapa m j s = EstadoJogo { mapaJogo = m
                                     , jogadoresJogo = j
                                     , cameraX = 0
                                     , objetoMapa = mapaToObjeto m
                                     , spritesheet = s
                                     , sprIdle = idleAnim s
                                     , sprMorto = mortoAnim s
                                     }

-- drawEstado :: EstadoJogo -> IO Picture
-- drawEstado EstadoMenu = return $ circle 30
-- drawEstado (EstadoJogo em) = return $ draw em

-- updateEstado :: Float -> EstadoJogo -> IO EstadoJogo
-- updateEstado t EstadoMenu = return EstadoMenu
-- updateEstado t (EstadoJogo em) = return $ EstadoJogo $ update t em

-- eventEstado :: Event -> EstadoJogo -> IO EstadoJogo
-- eventEstado e (EstadoJogo em) = return $ EstadoJogo $ event e em
-- eventEstado (EventKey _ _ _ _) EstadoMenu = do
--     estadoInicial <- mapa (gera 10 5 1) [Jogador 3 0 1 1 $ Chao True]
--     return $ EstadoJogo estadoInicial
-- eventEstado _ EstadoMenu = return EstadoMenu

-- main :: IO ()
-- main = playIO (InWindow "ExciteBike" (800, 600) (0, 0))
--             (greyN 0.5)
--             60
--             EstadoMenu
--             drawEstado
--             eventEstado
--             updateEstado